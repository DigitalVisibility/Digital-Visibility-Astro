---
import MainLayout from '../../layouts/MainLayout.astro';
  import AdminNavigation from '../../components/AdminNavigation.astro';
  import HeatmapPanel from '../../components/HeatmapPanel.astro';
import Footer from '../../components/Footer.astro';

export const prerender = false;

const meta = {
  title: "A/B Funnel Dashboard | Digital Visibility Admin",
  description: "Real-time analytics and AI-powered recommendations for the A/B marketing funnel"
};
---

<MainLayout title={meta.title}>
  <meta name="description" content={meta.description} slot="head">
  <meta name="robots" content="noindex, nofollow" slot="head">
  
  <AdminNavigation slot="nav" />
  
  <div class="min-h-screen bg-gray-50 py-8">
    <div class="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
      <!-- Header -->
      <div class="mb-8">
        <h1 class="text-3xl font-bold text-gray-900">A/B Funnel Dashboard</h1>
        <p class="mt-2 text-gray-600">Real-time analytics and AI-powered recommendations</p>
      </div>

      <!-- Key Metrics -->
      <div class="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
        <div class="bg-white rounded-lg shadow p-6">
          <div class="flex items-center">
            <div class="flex-shrink-0">
              <div class="w-8 h-8 bg-blue-500 rounded-full flex items-center justify-center">
                <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M17 20h5v-2a3 3 0 00-5.356-1.857M17 20H7m10 0v-2c0-.656-.126-1.283-.356-1.857M7 20H2v-2a3 3 0 015.356-1.857M7 20v-2c0-.656.126-1.283.356-1.857m0 0a5.002 5.002 0 019.288 0M15 7a3 3 0 11-6 0 3 3 0 016 0zm6 3a2 2 0 11-4 0 2 2 0 014 0zM7 10a2 2 0 11-4 0 2 2 0 014 0z"></path>
                </svg>
              </div>
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium text-gray-500">Total Visitors</p>
              <p class="text-2xl font-semibold text-gray-900" id="total-visitors">0</p>
            </div>
          </div>
        </div>

        <div class="bg-white rounded-lg shadow p-6">
          <div class="flex items-center">
            <div class="flex-shrink-0">
              <div class="w-8 h-8 bg-green-500 rounded-full flex items-center justify-center">
                <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 19v-6a2 2 0 00-2-2H5a2 2 0 00-2 2v6a2 2 0 002 2h2a2 2 0 002-2zm0 0V9a2 2 0 012-2h2a2 2 0 012 2v10m-6 0a2 2 0 002 2h2a2 2 0 002-2m0 0V5a2 2 0 012-2h2a2 2 0 012 2v14a2 2 0 01-2 2h-2a2 2 0 01-2-2z"></path>
                </svg>
              </div>
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium text-gray-500">Conversion Rate</p>
              <p class="text-2xl font-semibold text-gray-900" id="conversion-rate">0%</p>
            </div>
          </div>
        </div>

        <div class="bg-white rounded-lg shadow p-6">
          <div class="flex items-center">
            <div class="flex-shrink-0">
              <div class="w-8 h-8 bg-purple-500 rounded-full flex items-center justify-center">
                <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8c-1.657 0-3 .895-3 2s1.343 2 3 2 3 .895 3 2-1.343 2-3 2m0-8c1.11 0 2.08.402 2.599 1M12 8V7m0 1v8m0 0v1m0-1c-1.11 0-2.08-.402-2.599-1"></path>
                </svg>
              </div>
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium text-gray-500">Revenue</p>
              <p class="text-2xl font-semibold text-gray-900" id="revenue">£0</p>
            </div>
          </div>
        </div>

        <div class="bg-white rounded-lg shadow p-6">
          <div class="flex items-center">
            <div class="flex-shrink-0">
              <div class="w-8 h-8 bg-orange-500 rounded-full flex items-center justify-center">
                <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4l3 3m6-3a9 9 0 11-18 0 9 9 0 0118 0z"></path>
                </svg>
              </div>
            </div>
            <div class="ml-4">
              <p class="text-sm font-medium text-gray-500">Test Duration</p>
              <p class="text-2xl font-semibold text-gray-900" id="test-duration">0 days</p>
            </div>
          </div>
        </div>
      </div>

      <!-- Variant Performance -->
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
        <!-- Variant A -->
        <div class="bg-white rounded-lg shadow">
          <div class="px-6 py-4 border-b border-gray-200">
            <h3 class="text-lg font-semibold text-gray-900">Variant A</h3>
            <p class="text-sm text-gray-600">"Show Up in AI Search Results Within 30 Days"</p>
          </div>
          <div class="p-6">
            <div class="grid grid-cols-2 gap-4 mb-4">
              <div>
                <p class="text-sm font-medium text-gray-500">Visitors</p>
                <p class="text-xl font-semibold text-gray-900" id="variant-a-visitors">0</p>
              </div>
              <div>
                <p class="text-sm font-medium text-gray-500">Conversions</p>
                <p class="text-xl font-semibold text-gray-900" id="variant-a-conversions">0</p>
              </div>
              <div>
                <p class="text-sm font-medium text-gray-500">Conversion Rate</p>
                <p class="text-xl font-semibold text-gray-900" id="variant-a-rate">0%</p>
              </div>
              <div>
                <p class="text-sm font-medium text-gray-500">Revenue</p>
                <p class="text-xl font-semibold text-gray-900" id="variant-a-revenue">£0</p>
              </div>
            </div>
            <div class="mb-2">
              <div class="flex justify-between text-sm">
                <span class="text-gray-600">Traffic Allocation</span>
                <span class="text-gray-900" id="variant-a-percentage">0%</span>
              </div>
              <div class="w-full bg-gray-200 rounded-full h-2">
                <div class="bg-blue-600 h-2 rounded-full" id="variant-a-progress" style="width: 0%"></div>
              </div>
            </div>
          </div>
        </div>

        <!-- Variant B -->
        <div class="bg-white rounded-lg shadow">
          <div class="px-6 py-4 border-b border-gray-200">
            <h3 class="text-lg font-semibold text-gray-900">Variant B</h3>
            <p class="text-sm text-gray-600">"Free AI Optimization — Get Recommended by ChatGPT, Bing, and Google AI"</p>
          </div>
          <div class="p-6">
            <div class="grid grid-cols-2 gap-4 mb-4">
              <div>
                <p class="text-sm font-medium text-gray-500">Visitors</p>
                <p class="text-xl font-semibold text-gray-900" id="variant-b-visitors">0</p>
              </div>
              <div>
                <p class="text-sm font-medium text-gray-500">Conversions</p>
                <p class="text-xl font-semibold text-gray-900" id="variant-b-conversions">0</p>
              </div>
              <div>
                <p class="text-sm font-medium text-gray-500">Conversion Rate</p>
                <p class="text-xl font-semibold text-gray-900" id="variant-b-rate">0%</p>
              </div>
              <div>
                <p class="text-sm font-medium text-gray-500">Revenue</p>
                <p class="text-xl font-semibold text-gray-900" id="variant-b-revenue">£0</p>
              </div>
            </div>
            <div class="mb-2">
              <div class="flex justify-between text-sm">
                <span class="text-gray-600">Traffic Allocation</span>
                <span class="text-gray-900" id="variant-b-percentage">0%</span>
              </div>
              <div class="w-full bg-gray-200 rounded-full h-2">
                <div class="bg-green-600 h-2 rounded-full" id="variant-b-progress" style="width: 0%"></div>
              </div>
            </div>
          </div>
        </div>
      </div>

      <!-- Statistical Analysis -->
      <div class="bg-white rounded-lg shadow mb-8">
        <div class="px-6 py-4 border-b border-gray-200">
          <h3 class="text-lg font-semibold text-gray-900">Statistical Analysis</h3>
        </div>
        <div class="p-6">
          <div class="grid grid-cols-1 md:grid-cols-4 gap-6">
            <div>
              <p class="text-sm font-medium text-gray-500">Confidence Level</p>
              <p class="text-2xl font-semibold text-gray-900" id="confidence-level">0%</p>
            </div>
            <div>
              <p class="text-sm font-medium text-gray-500">Sample Size</p>
              <p class="text-2xl font-semibold text-gray-900" id="sample-size">0</p>
            </div>
            <div>
              <p class="text-sm font-medium text-gray-500">Winner</p>
              <p class="text-2xl font-semibold text-gray-900" id="winner">-</p>
            </div>
            <div>
              <p class="text-sm font-medium text-gray-500">Improvement</p>
              <p class="text-2xl font-semibold text-gray-900" id="improvement">-</p>
            </div>
          </div>
        </div>
      </div>

      <!-- AI Recommendations & Recent Activity -->
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-8 mb-8">
        <!-- AI Recommendations -->
        <div class="bg-white rounded-lg shadow">
          <div class="px-6 py-4 border-b border-gray-200">
            <h3 class="text-lg font-semibold text-gray-900">AI Recommendations</h3>
            <p class="text-sm text-gray-600">Powered by Claude AI</p>
          </div>
          <div class="p-6">
            <div id="recommendations" class="space-y-3">
              <!-- Recommendations will be populated by JavaScript -->
            </div>
          </div>
        </div>

        <!-- Recent Activity -->
        <div class="bg-white rounded-lg shadow">
          <div class="px-6 py-4 border-b border-gray-200">
            <h3 class="text-lg font-semibold text-gray-900">Recent Activity</h3>
          </div>
          <div class="p-6">
            <div id="recent-activity" class="space-y-4">
              <!-- Activity will be populated by JavaScript -->
            </div>
          </div>
        </div>
      </div>

      <!-- Heatmap Visualization -->
      <div class="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
        <HeatmapPanel page="/funnel/a/" variant="A" dateRange="24h" />
        <HeatmapPanel page="/funnel/b/" variant="B" dateRange="24h" />
      </div>

      <!-- Quick Actions -->
      <div class="bg-white rounded-lg shadow">
        <div class="px-6 py-4 border-b border-gray-200">
          <h3 class="text-lg font-semibold text-gray-900">Quick Actions</h3>
        </div>
        <div class="p-6">
          <div class="space-y-3">
            <button id="adjust-traffic" class="w-full text-left p-3 bg-blue-50 hover:bg-blue-100 rounded-lg transition-colors">
              <p class="text-sm font-medium text-blue-900">Adjust Traffic Split</p>
              <p class="text-xs text-blue-700">Modify A/B test traffic allocation</p>
            </button>
            <button id="update-copy" class="w-full text-left p-3 bg-green-50 hover:bg-green-100 rounded-lg transition-colors">
              <p class="text-sm font-medium text-green-900">Update Copy</p>
              <p class="text-xs text-green-700">Modify headlines, CTAs, or descriptions</p>
            </button>
            <button id="export-data" class="w-full text-left p-3 bg-purple-50 hover:bg-purple-100 rounded-lg transition-colors">
              <p class="text-sm font-medium text-purple-900">Export Data</p>
              <p class="text-xs text-purple-700">Download analytics data for analysis</p>
            </button>
            <button id="reset-test" class="w-full text-left p-3 bg-red-50 hover:bg-red-100 rounded-lg transition-colors">
              <p class="text-sm font-medium text-red-900">Reset Test</p>
              <p class="text-xs text-red-700">Start fresh A/B test</p>
            </button>
          </div>
        </div>
      </div>
    </div>
  </div>
  
  <Footer />
</MainLayout>

<!-- Dashboard Scripts -->
<script>
  // Real-time data fetching
  let analyticsData = null;
  let refreshInterval = null;

  async function fetchAnalyticsData() {
    try {
      // Get admin credentials from localStorage or prompt
      const credentials = getAdminCredentials();
      if (!credentials) {
        promptForCredentials();
        return;
      }

      const response = await fetch('/api/funnel-metrics', {
        headers: {
          'Authorization': `Basic ${btoa(credentials)}`,
          'Content-Type': 'application/json'
        }
      });
      
      const result = await response.json();
      
      if (result.success) {
        analyticsData = result.data;
        updateDashboard();
      } else {
        console.error('Failed to fetch analytics data:', result.error);
        if (result.error === 'Invalid credentials') {
          promptForCredentials();
        } else {
          loadMockData();
        }
      }
    } catch (error) {
      console.error('Error fetching analytics data:', error);
      loadMockData();
    }
  }

  function getAdminCredentials() {
    return localStorage.getItem('admin_credentials');
  }

  function promptForCredentials() {
    const username = prompt('Admin Username:');
    const password = prompt('Admin Password:');
    
    if (username && password) {
      const credentials = `${username}:${password}`;
      localStorage.setItem('admin_credentials', credentials);
      fetchAnalyticsData();
    } else {
      loadMockData();
    }
  }

  function loadMockData() {
    // Show empty state when no real data is available
    analyticsData = {
      summary: {
        totalVisitors: 0,
        totalConversions: 0,
        totalRevenue: 0,
        testDuration: 0,
        confidenceLevel: 0,
        winner: 'No Data',
        improvement: '0%'
      },
      variants: {
        a: {
          visitors: 0,
          conversions: 0,
          conversionRate: 0,
          revenue: 0,
          trafficAllocation: 50
        },
        b: {
          visitors: 0,
          conversions: 0,
          conversionRate: 0,
          revenue: 0,
          trafficAllocation: 50
        }
      },
      recommendations: [],
      recentActivity: [
        { time: 'Just now', action: 'Waiting for real data from analytics APIs', type: 'info' }
      ]
    };
    updateDashboard();
  }

  function updateDashboard() {
    if (!analyticsData) return;

    const { summary, variants, recommendations, recentActivity } = analyticsData;

    // Key metrics
    document.getElementById('total-visitors').textContent = summary.totalVisitors.toLocaleString();
    document.getElementById('conversion-rate').textContent = ((summary.totalConversions / summary.totalVisitors) * 100).toFixed(1) + '%';
    document.getElementById('revenue').textContent = '£' + summary.totalRevenue.toLocaleString();
    document.getElementById('test-duration').textContent = summary.testDuration + ' days';

    // Variant A
    document.getElementById('variant-a-visitors').textContent = variants.a.visitors.toLocaleString();
    document.getElementById('variant-a-conversions').textContent = variants.a.conversions;
    document.getElementById('variant-a-rate').textContent = variants.a.conversionRate.toFixed(1) + '%';
    document.getElementById('variant-a-revenue').textContent = '£' + variants.a.revenue.toLocaleString();
    document.getElementById('variant-a-percentage').textContent = variants.a.trafficAllocation.toFixed(1) + '%';
    document.getElementById('variant-a-progress').style.width = variants.a.trafficAllocation + '%';

    // Variant B
    document.getElementById('variant-b-visitors').textContent = variants.b.visitors.toLocaleString();
    document.getElementById('variant-b-conversions').textContent = variants.b.conversions;
    document.getElementById('variant-b-rate').textContent = variants.b.conversionRate.toFixed(1) + '%';
    document.getElementById('variant-b-revenue').textContent = '£' + variants.b.revenue.toLocaleString();
    document.getElementById('variant-b-percentage').textContent = variants.b.trafficAllocation.toFixed(1) + '%';
    document.getElementById('variant-b-progress').style.width = variants.b.trafficAllocation + '%';

    // Statistical analysis
    document.getElementById('confidence-level').textContent = summary.confidenceLevel + '%';
    document.getElementById('sample-size').textContent = summary.totalVisitors.toLocaleString();
    document.getElementById('winner').textContent = summary.winner;
    document.getElementById('improvement').textContent = summary.improvement;

    // AI Recommendations
    const recommendationsContainer = document.getElementById('recommendations');
    recommendationsContainer.innerHTML = '';
    
    if (recommendations && recommendations.length > 0) {
      recommendations.forEach(rec => {
        const recDiv = document.createElement('div');
        const priorityClass = rec.priority === 'High' ? 'bg-red-50 border-red-200' : 
                             rec.priority === 'Medium' ? 'bg-yellow-50 border-yellow-200' : 
                             'bg-blue-50 border-blue-200';
        const textClass = rec.priority === 'High' ? 'text-red-800' : 
                         rec.priority === 'Medium' ? 'text-yellow-800' : 
                         'text-blue-800';
        
        recDiv.className = `p-4 border rounded-lg ${priorityClass} mb-3`;
        recDiv.innerHTML = `
          <div class="flex items-start justify-between">
            <div class="flex-1">
              <div class="flex items-center mb-2">
                <span class="px-2 py-1 text-xs font-semibold rounded-full ${rec.priority === 'High' ? 'bg-red-200 text-red-800' : rec.priority === 'Medium' ? 'bg-yellow-200 text-yellow-800' : 'bg-blue-200 text-blue-800'}">${rec.priority}</span>
              </div>
              <p class="text-sm font-medium ${textClass} mb-1">${rec.suggestion}</p>
              <p class="text-xs ${textClass} opacity-75">${rec.rationale}</p>
            </div>
          </div>
        `;
        recommendationsContainer.appendChild(recDiv);
      });
    } else {
      const noRecDiv = document.createElement('div');
      noRecDiv.className = 'p-3 bg-gray-50 rounded-lg';
      noRecDiv.innerHTML = '<p class="text-sm text-gray-600">No AI recommendations available. Click "Generate New AI Advice" to create recommendations.</p>';
      recommendationsContainer.appendChild(noRecDiv);
    }

    // Recent activity
    const activityContainer = document.getElementById('recent-activity');
    activityContainer.innerHTML = '';
    recentActivity.forEach(activity => {
      const activityDiv = document.createElement('div');
      activityDiv.className = 'flex items-center space-x-3';
      const color = activity.type === 'success' ? 'green' : activity.type === 'warning' ? 'yellow' : 'blue';
      activityDiv.innerHTML = `
        <div class="w-2 h-2 bg-${color}-500 rounded-full"></div>
        <div>
          <p class="text-sm text-gray-600">${activity.action}</p>
          <p class="text-xs text-gray-500">${activity.time}</p>
        </div>
      `;
      activityContainer.appendChild(activityDiv);
    });
  }

  async function generateNewAIAdvice() {
    try {
      const credentials = getAdminCredentials();
      if (!credentials) {
        promptForCredentials();
        return;
      }

      const response = await fetch('/api/ai-advice', {
        method: 'POST',
        headers: {
          'Authorization': `Basic ${btoa(credentials)}`,
          'Content-Type': 'application/json'
        }
      });
      
      const result = await response.json();
      
      if (result.success) {
        // Refresh the dashboard to show new recommendations
        fetchAnalyticsData();
        alert('New AI recommendations generated!');
      } else {
        alert('Failed to generate AI advice: ' + result.error);
      }
    } catch (error) {
      console.error('Error generating AI advice:', error);
      alert('Error generating AI advice');
    }
  }

  function generateCSV() {
    if (!analyticsData || analyticsData.summary.totalVisitors === 0) {
      return 'Date,Variant,Visitors,Conversions,Conversion Rate,Revenue\nNo data available';
    }
    
    const headers = ['Date', 'Variant', 'Visitors', 'Conversions', 'Conversion Rate', 'Revenue'];
    const today = new Date().toISOString().split('T')[0];
    const rows = [
      [today, 'A', analyticsData.variants.a.visitors, analyticsData.variants.a.conversions, analyticsData.variants.a.conversionRate.toFixed(1) + '%', '£' + analyticsData.variants.a.revenue],
      [today, 'B', analyticsData.variants.b.visitors, analyticsData.variants.b.conversions, analyticsData.variants.b.conversionRate.toFixed(1) + '%', '£' + analyticsData.variants.b.revenue]
    ];
    
    return [headers, ...rows].map(row => row.join(',')).join('\n');
  }

  function downloadCSV(csvData, filename) {
    const blob = new Blob([csvData], { type: 'text/csv' });
    const url = window.URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = filename;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    window.URL.revokeObjectURL(url);
  }

  document.addEventListener('DOMContentLoaded', function() {
    // Load initial data
    fetchAnalyticsData();
    
    // Set up auto-refresh every 5 minutes
    refreshInterval = setInterval(fetchAnalyticsData, 5 * 60 * 1000);

    // Quick actions
    document.getElementById('adjust-traffic').addEventListener('click', () => {
      alert('Traffic adjustment feature coming soon!');
    });

    document.getElementById('update-copy').addEventListener('click', () => {
      alert('Copy update feature coming soon!');
    });

    document.getElementById('export-data').addEventListener('click', () => {
      // Export data as CSV
      const csvData = generateCSV();
      downloadCSV(csvData, 'funnel-analytics.csv');
    });

    document.getElementById('reset-test').addEventListener('click', () => {
      if (confirm('Are you sure you want to reset the test? This will clear all data.')) {
        alert('Test reset feature coming soon!');
      }
    });

    // Add refresh button functionality
    const refreshButton = document.createElement('button');
    refreshButton.textContent = 'Refresh Data';
    refreshButton.className = 'bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded-lg transition-colors';
    refreshButton.addEventListener('click', fetchAnalyticsData);
    
    const header = document.querySelector('.mb-8');
    if (header) {
      header.appendChild(refreshButton);
    }

    // Add AI advice refresh button
    const aiRefreshButton = document.createElement('button');
    aiRefreshButton.textContent = 'Generate New AI Advice';
    aiRefreshButton.className = 'bg-green-600 hover:bg-green-700 text-white font-bold py-2 px-4 rounded-lg transition-colors ml-2';
    aiRefreshButton.addEventListener('click', generateNewAIAdvice);
    
    if (header) {
      header.appendChild(aiRefreshButton);
    }
  });

  // Clean up interval on page unload
  window.addEventListener('beforeunload', () => {
    if (refreshInterval) {
      clearInterval(refreshInterval);
    }
  });
</script>