---
// AI Sales Agent Chat Widget Component
// This is a placeholder that will connect to your Voiceflow agent or custom backend
---

<div id="ai-agent-widget" class="fixed bottom-6 right-6 z-50">
  <!-- Chat Button -->
  <button 
    id="ai-agent-toggle"
    class="bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-full p-4 shadow-2xl hover:shadow-3xl transition-all duration-300 hover:scale-110 flex items-center justify-center group"
    aria-label="Open AI Assistant"
  >
    <svg class="w-6 h-6 group-hover:scale-110 transition-transform" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8 10h.01M12 10h.01M16 10h.01M9 16H5a2 2 0 01-2-2V6a2 2 0 012-2h14a2 2 0 012 2v8a2 2 0 01-2 2h-5l-5 5v-5z"></path>
    </svg>
    <span class="ml-2 font-semibold hidden md:inline">Ask AI Assistant</span>
  </button>

  <!-- Chat Window -->
  <div 
    id="ai-agent-window"
    class="hidden fixed bottom-24 right-6 w-96 h-[600px] bg-white rounded-2xl shadow-2xl flex flex-col overflow-hidden border border-gray-200"
  >
    <!-- Header -->
    <div class="bg-gradient-to-r from-blue-600 to-purple-600 text-white p-4 flex items-center justify-between">
      <div class="flex items-center">
        <div class="w-10 h-10 bg-white rounded-full flex items-center justify-center mr-3">
          <svg class="w-6 h-6 text-blue-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path>
          </svg>
        </div>
        <div>
          <h3 class="font-bold text-lg">Digital Visibility AI</h3>
          <p class="text-xs text-blue-100">Usually replies instantly</p>
        </div>
      </div>
      <button 
        id="ai-agent-close"
        class="text-white hover:bg-white/20 rounded-full p-2 transition"
        aria-label="Close chat"
      >
        <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12"></path>
        </svg>
      </button>
    </div>

    <!-- Messages Container -->
    <div id="ai-agent-messages" class="flex-1 overflow-y-auto p-4 space-y-4 bg-gray-50">
      <!-- Welcome Message -->
      <div class="flex items-start">
        <div class="w-8 h-8 bg-gradient-to-r from-blue-600 to-purple-600 rounded-full flex items-center justify-center mr-2 flex-shrink-0">
          <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path>
          </svg>
        </div>
        <div class="bg-white rounded-2xl rounded-tl-none p-4 shadow-sm max-w-[80%]">
          <p class="text-gray-800 text-sm">
            Hi! I'm the Digital Visibility AI assistant. I can help you with:
          </p>
          <ul class="mt-2 space-y-1 text-sm text-gray-700">
            <li>‚úì Finding the right service for your needs</li>
            <li>‚úì Pricing and package information</li>
            <li>‚úì Booking a free consultation</li>
            <li>‚úì Answering questions about our process</li>
          </ul>
          <p class="mt-3 text-sm text-gray-800">What brings you here today?</p>
        </div>
      </div>

      <!-- Quick Action Buttons -->
      <div class="flex flex-wrap gap-2 px-2">
        <button class="quick-action-btn bg-blue-100 text-blue-700 px-4 py-2 rounded-full text-sm font-medium hover:bg-blue-200 transition" data-message="I need help with SEO">
          SEO Services
        </button>
        <button class="quick-action-btn bg-purple-100 text-purple-700 px-4 py-2 rounded-full text-sm font-medium hover:bg-purple-200 transition" data-message="Tell me about AI automation">
          AI Automation
        </button>
        <button class="quick-action-btn bg-green-100 text-green-700 px-4 py-2 rounded-full text-sm font-medium hover:bg-green-200 transition" data-message="I want to book a consultation">
          Book Consultation
        </button>
        <button class="quick-action-btn bg-orange-100 text-orange-700 px-4 py-2 rounded-full text-sm font-medium hover:bg-orange-200 transition" data-message="What are your prices?">
          Pricing Info
        </button>
      </div>
    </div>

    <!-- Input Area -->
    <div class="p-4 bg-white border-t border-gray-200">
      <form id="ai-agent-form" class="flex items-center gap-2">
        <input 
          type="text"
          id="ai-agent-input"
          placeholder="Type your message..."
          class="flex-1 px-4 py-3 border border-gray-300 rounded-full focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent text-sm"
          autocomplete="off"
        />
        <button 
          type="submit"
          class="bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-full p-3 hover:shadow-lg transition-all disabled:opacity-50 disabled:cursor-not-allowed"
          aria-label="Send message"
        >
          <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 19l9 2-9-18-9 18 9-2zm0 0v-8"></path>
          </svg>
        </button>
      </form>
      <p class="text-xs text-gray-500 mt-2 text-center">
        Powered by AI ‚Ä¢ Responses may take a few seconds
      </p>
    </div>
  </div>
</div>

<style>
  @media (max-width: 640px) {
    #ai-agent-window {
      width: calc(100vw - 2rem);
      height: calc(100vh - 8rem);
      right: 1rem;
      bottom: 5rem;
    }
  }

  #ai-agent-messages::-webkit-scrollbar {
    width: 6px;
  }

  #ai-agent-messages::-webkit-scrollbar-track {
    background: #f1f1f1;
  }

  #ai-agent-messages::-webkit-scrollbar-thumb {
    background: #888;
    border-radius: 3px;
  }

  #ai-agent-messages::-webkit-scrollbar-thumb:hover {
    background: #555;
  }

  .typing-indicator {
    display: flex;
    gap: 4px;
    padding: 12px;
  }

  .typing-indicator span {
    width: 8px;
    height: 8px;
    background: #6b7280;
    border-radius: 50%;
    animation: typing 1.4s infinite;
  }

  .typing-indicator span:nth-child(2) {
    animation-delay: 0.2s;
  }

  .typing-indicator span:nth-child(3) {
    animation-delay: 0.4s;
  }

  @keyframes typing {
    0%, 60%, 100% {
      transform: translateY(0);
    }
    30% {
      transform: translateY(-10px);
    }
  }
</style>

<script>
  // AI Agent Chat Widget JavaScript
  // Connected to Claude Sonnet 4.5 API

  const API_ENDPOINT = '/api/ai-agent';
  
  let conversationHistory: Array<{role: string; content: string}> = [];
  let isProcessing = false;

  // DOM Elements
  const toggleBtn = document.getElementById('ai-agent-toggle');
  const closeBtn = document.getElementById('ai-agent-close');
  const chatWindow = document.getElementById('ai-agent-window');
  const messagesContainer = document.getElementById('ai-agent-messages');
  const chatForm = document.getElementById('ai-agent-form');
  const chatInput = document.getElementById('ai-agent-input') as HTMLInputElement;
  const quickActionBtns = document.querySelectorAll('.quick-action-btn');

  // Toggle chat window
  toggleBtn?.addEventListener('click', () => {
    chatWindow?.classList.toggle('hidden');
    if (!chatWindow?.classList.contains('hidden')) {
      chatInput?.focus();
    }
  });

  closeBtn?.addEventListener('click', () => {
    chatWindow?.classList.add('hidden');
  });

  // Quick action buttons
  quickActionBtns.forEach(btn => {
    btn.addEventListener('click', () => {
      const message = btn.getAttribute('data-message');
      if (message) {
        sendMessage(message);
      }
    });
  });

  // Handle form submission
  chatForm?.addEventListener('submit', async (e) => {
    e.preventDefault();
    const message = chatInput?.value.trim();
    if (message && !isProcessing) {
      await sendMessage(message);
      if (chatInput) chatInput.value = '';
    }
  });

  // Send message function
  async function sendMessage(message: string) {
    if (isProcessing) return;
    
    isProcessing = true;
    
    // Add user message to UI
    addMessage(message, 'user');
    
    // Show typing indicator
    showTypingIndicator();
    
    // Add to conversation history
    conversationHistory.push({
      role: 'user',
      content: message
    });

    try {
      // Call the real Claude API endpoint
      console.log('ü§ñ Sending message to:', API_ENDPOINT);
      console.log('üìù Message:', message);
      
      const response = await fetch(API_ENDPOINT, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          message: message,
          conversationHistory: conversationHistory.slice(0, -1), // Don't include the message we just added
        }),
      });

      console.log('üì° Response status:', response.status);
      console.log('üì° Response ok:', response.ok);

      if (!response.ok) {
        const errorText = await response.text();
        console.error('‚ùå API Error Response:', errorText);
        throw new Error(`API request failed with status ${response.status}: ${errorText}`);
      }

      const data = await response.json();
      console.log('‚úÖ API Response:', data);
      
      // Remove typing indicator
      removeTypingIndicator();
      
      // Check if response contains a booking request
      const bookingMatch = data.message.match(/\[BOOKING_REQUEST\](.*?)\[\/BOOKING_REQUEST\]/);
      if (bookingMatch) {
        try {
          const bookingData = JSON.parse(bookingMatch[1]);
          console.log('üìÖ Processing booking:', bookingData);
          
          // Call n8n webhook
          const bookingResponse = await fetch('/api/booking', {
            method: 'POST',
            headers: { 'Content-Type': 'application/json' },
            body: JSON.stringify(bookingData)
          });
          
          if (bookingResponse.ok) {
            const bookingResult = await bookingResponse.json();
            console.log('‚úÖ Booking successful:', bookingResult);
            
            // Replace booking request tag with success message
            const successMessage = data.message.replace(
              /\[BOOKING_REQUEST\].*?\[\/BOOKING_REQUEST\]/,
              `‚úÖ Booking confirmed! Check your email for details and the Google Meet link.`
            );
            addMessage(successMessage, 'assistant');
          } else {
            throw new Error('Booking failed');
          }
        } catch (error) {
          console.error('‚ùå Booking error:', error);
          addMessage(data.message.replace(/\[BOOKING_REQUEST\].*?\[\/BOOKING_REQUEST\]/, '‚ùå Sorry, booking failed. Please try the calendar link or call us.'), 'assistant');
        }
      } else {
        // Add AI response to UI normally
        addMessage(data.message, 'assistant');
      }
      
      // Add to conversation history
      conversationHistory.push({
        role: 'assistant',
        content: data.message
      });

      // Save conversation
      saveChat();
      
    } catch (error) {
      console.error('Error sending message:', error);
      removeTypingIndicator();
      addMessage('Sorry, I encountered an error. Please try again or call us at 01792 002 497.', 'assistant');
    }
    
    isProcessing = false;
  }

  // Add message to UI
  function addMessage(text, sender) {
    const messageDiv = document.createElement('div');
    messageDiv.className = 'flex items-start';
    
    if (sender === 'user') {
      messageDiv.classList.add('justify-end');
      messageDiv.innerHTML = `
        <div class="bg-gradient-to-r from-blue-600 to-purple-600 text-white rounded-2xl rounded-tr-none p-4 shadow-sm max-w-[80%]">
          <p class="text-sm">${escapeHtml(text)}</p>
        </div>
      `;
    } else {
      messageDiv.innerHTML = `
        <div class="w-8 h-8 bg-gradient-to-r from-blue-600 to-purple-600 rounded-full flex items-center justify-center mr-2 flex-shrink-0">
          <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path>
          </svg>
        </div>
        <div class="bg-white rounded-2xl rounded-tl-none p-4 shadow-sm max-w-[80%]">
          <p class="text-gray-800 text-sm">${formatMessage(text)}</p>
        </div>
      `;
    }
    
    messagesContainer?.appendChild(messageDiv);
    messagesContainer?.scrollTo({
      top: messagesContainer.scrollHeight,
      behavior: 'smooth'
    });
  }

  // Show typing indicator
  function showTypingIndicator() {
    const indicator = document.createElement('div');
    indicator.id = 'typing-indicator';
    indicator.className = 'flex items-start';
    indicator.innerHTML = `
      <div class="w-8 h-8 bg-gradient-to-r from-blue-600 to-purple-600 rounded-full flex items-center justify-center mr-2 flex-shrink-0">
        <svg class="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9.663 17h4.673M12 3v1m6.364 1.636l-.707.707M21 12h-1M4 12H3m3.343-5.657l-.707-.707m2.828 9.9a5 5 0 117.072 0l-.548.547A3.374 3.374 0 0014 18.469V19a2 2 0 11-4 0v-.531c0-.895-.356-1.754-.988-2.386l-.548-.547z"></path>
        </svg>
      </div>
      <div class="bg-white rounded-2xl rounded-tl-none p-4 shadow-sm">
        <div class="typing-indicator">
          <span></span>
          <span></span>
          <span></span>
        </div>
      </div>
    `;
    messagesContainer?.appendChild(indicator);
    messagesContainer?.scrollTo({
      top: messagesContainer.scrollHeight,
      behavior: 'smooth'
    });
  }

  // Remove typing indicator
  function removeTypingIndicator() {
    const indicator = document.getElementById('typing-indicator');
    indicator?.remove();
  }

  // Format message with line breaks, lists, and special elements
  function formatMessage(text) {
    // Handle booking buttons
    text = text.replace(/\[BOOK_BUTTON\](.*?)\[\/BOOK_BUTTON\]/g, (match, url) => {
      return `<br><a href="${url}" target="_blank" rel="noopener noreferrer" class="inline-block mt-2 bg-gradient-to-r from-blue-600 to-purple-600 text-white px-6 py-3 rounded-lg font-semibold hover:shadow-lg transition-all duration-300 hover:scale-105"> Book Free Consultation</a><br>`;
    });
    
    // Handle booking requests (for n8n integration)
    text = text.replace(/\[BOOKING_REQUEST\](.*?)\[\/BOOKING_REQUEST\]/g, (match, data) => {
      // This would trigger the n8n webhook call
      // For now, just show a confirmation message
      return '<br><div class="mt-2 p-3 bg-green-50 border border-green-200 rounded-lg text-green-800 text-sm"> Processing your booking...</div><br>';
    });
    
    return text
      .replace(/\n/g, '<br>')
      .replace(/‚Ä¢/g, '&bull;');
  }

  // Escape HTML to prevent XSS
  function escapeHtml(text) {
    const div = document.createElement('div');
    div.textContent = text;
    return div.innerHTML;
  }

  // Initialize chat state from localStorage
  function initializeChat() {
    const savedHistory = localStorage.getItem('ai-agent-history');
    if (savedHistory) {
      try {
        conversationHistory = JSON.parse(savedHistory);
      } catch (e) {
        console.error('Error loading chat history:', e);
      }
    }
  }

  // Save chat state to localStorage
  function saveChat() {
    try {
      localStorage.setItem('ai-agent-history', JSON.stringify(conversationHistory));
    } catch (e) {
      console.error('Error saving chat history:', e);
    }
  }

  // Initialize on load
  initializeChat();

  // Save chat periodically
  setInterval(saveChat, 5000);
</script>
